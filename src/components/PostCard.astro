---
interface Image {
  url: string;
  width?: number;
  height?: number;
}
interface Props {
  id: number;
  title: string;
  description: string;
  href: string;
  publishedAt: string;
  image?: Image;
}
const {
  id,
  title,
  description,
  href,
  publishedAt,
  image = { url: "https://placehold.co/1200x630", width: 1200, height: 630 },
} = Astro.props;
---

<a
  href={href}
  class="w-full flex flex-col group p-4 bg-white border dark:border-none dark:bg-[#1c1e24] rounded-xl hover:-translate-y-1 duration-150"
>
  <img
    src={image.url}
    width={image.width}
    height={image.height}
    class="w-full h-[250px] md:h-[300px] object-cover object-center mb-2"
  />
  <div class="flex flex-col">
    <div>
      <h2 class="text-xl font-semibold">{title}</h2>
    </div>
    <div class="font-[400] mt-1 mb-2 flex flex-row justify-between">
      <div class="published_at italic" data-published={publishedAt}></div>
      <div class="flex flex-row gap-x-2 font-bold">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          ><path
            fill="currentColor"
            d="M12 9a3 3 0 0 1 3 3a3 3 0 0 1-3 3a3 3 0 0 1-3-3a3 3 0 0 1 3-3m0-4.5c5 0 9.27 3.11 11 7.5c-1.73 4.39-6 7.5-11 7.5S2.73 16.39 1 12c1.73-4.39 6-7.5 11-7.5M3.18 12a9.821 9.821 0 0 0 17.64 0a9.821 9.821 0 0 0-17.64 0"
          ></path></svg
        ><span class="views" data-id={id}></span>
      </div>
    </div>
  </div>
  <h3 class="font-medium">
    {
      description.split(" ").slice(0, 50).join(" ") +
        (description.split(" ").length >= 50 ? "..." : "")
    }
  </h3>
</a>
<script>
  import { parseIsoDatetimeSince, formatIsoDatetime } from "../utils/functions";
  document.addEventListener("astro:page-load", () => {
    const publishedAts = document.querySelectorAll(".published_at");
    (publishedAts as NodeListOf<HTMLElement>).forEach((elem) => {
      elem.textContent = parseIsoDatetimeSince(
        elem.dataset.published as string
      );
      elem.appendChild(document.createElement("br"));
      const tooltipText = document.createElement("span");
      if (!elem.dataset.published) return;
      tooltipText.innerText = formatIsoDatetime(
        elem.dataset.published,
        true
      ) as string;
      tooltipText.classList.add("pub_tooltip");
      elem.appendChild(tooltipText);
    });
    const views = document.querySelectorAll(".views");
    (views as NodeListOf<HTMLElement>).forEach((elem) => {
      const id = elem.dataset.id as string;
      fetch(`/api/get-views/${id}`, { method: "GET" })
        .then((res) => res.json())
        .then((data) => {
          elem.textContent = data.views;
        });
    });
  });
</script>
