---
import Nav from "../components/Nav.astro";
import { formatIsoDatetime } from "../utils/functions";
import type { BlogPost } from "../utils/types";
import Layout from "./Layout.astro";
import { marked } from "marked";
import { SEO } from "astro-seo";
interface Props {
  post: BlogPost;
  navActive?: boolean;
}
const { post, navActive = true } = Astro.props;
const formattedUpdated = post?.date_updated
  ? formatIsoDatetime(post.date_updated)
  : "";
const formattedPublished = post?.published_at
  ? formatIsoDatetime(post.published_at)
  : "";

let seo = post?.seo;
if (seo?.use_parent_fields) {
  if (!seo.og_image && !!post.image) {
    seo.og_image = post.image;
  }
  if (!seo.meta_description) {
    seo.meta_description = post.description;
  }
}
---

<SEO
  description={seo?.meta_description}
  canonical={seo?.canonical_url}
  noindex={seo?.no_index}
  nofollow={seo?.no_follow}
/>
{
  seo?.og_image && (
    <SEO
      openGraph={{
        basic: {
          title: post.title,
          type: "article",
          image: `https://blog-directus.vsahni.me/assets/${seo.og_image}/${post.slug}.webp?key=blog`,
        },
        article: {
          publishedTime: post.published_at,
          authors: ["Varun Sahni"],
        },
      }}
      twitter={{
        card: "summary_large_image",
        description: seo?.meta_description,
      }}
    />
  )
}

<Layout title={`${post.title} - Varun Sahni`}>
  <Fragment slot="seo">
    <SEO
      description={seo?.meta_description}
      canonical={seo?.canonical_url}
      noindex={seo?.no_index}
      nofollow={seo?.no_follow}
    />
    {
      seo?.og_image && (
        <SEO
          openGraph={{
            basic: {
              title: post.title,
              type: "article",
              image: `https://blog-directus.vsahni.me/assets/${seo.og_image}/${post.slug}.webp?key=blog`,
            },
            article: {
              publishedTime: post.published_at,
              authors: ["Varun Sahni"],
            },
          }}
          twitter={{
            card: "summary_large_image",
            description: seo?.meta_description,
          }}
        />
      )
    }
  </Fragment>
  <post-meta
    data-meta={JSON.stringify({
      id: post.id,
      title: post.title,
      published_at: post.published_at,
      updated_at: post.date_updated,
      slug: post.slug,
    })}></post-meta>
  <main
    class="mx-auto min-h-[80vh] max-w-screen-lg scroll-smooth motion-reduce:scroll-auto font-sans py-8 px-3"
  >
    <article>
      <div
        class="w-full flex flex-col md:flex-row md:items-center md:justify-between"
      >
        <div>
          <h1 class="text-2xl md:text-3xl font-bold mb-1">{post.title}</h1>
          <p class="text-base md:text-lg mb-3 md:mb-0">{post.description}</p>
        </div>
        <div class="text-base md:text-end whitespace-nowrap md:pl-6">
          <time class="published" datetime={post.published_at}>
            Published on {formattedPublished}
          </time>
          {
            formattedPublished !== formattedUpdated && !!formattedUpdated ? (
              <>
                <br />
                <time
                  datetime={post.date_updated}
                  class="text-black/70 dark:text-white/70 italic updated"
                >
                  Last updated on {formattedUpdated}
                </time>
              </>
            ) : (
              ""
            )
          }
        </div>
      </div>
      <Nav navClass={!navActive ? "pointer-events-none" : ""} />
      <section
        class="prose dark:prose-invert md:prose-lg prose-h2:mb-2 w-full max-w-none pt-5"
        set:html={marked.parse(post.content)}
      />
    </article>
  </main>
  <div class="mx-auto max-w-screen-lg px-3">
    <hr class="!rounded-none !border-neutral-800" />
  </div>
  <div class="giscus max-w-screen-lg px-3 mx-auto py-8"></div>
</Layout>
<script>
  function sendMessage(message: object) {
    const giscus_frame = document.querySelector(
      "iframe.giscus-frame"
    ) as HTMLIFrameElement;
    if (!giscus_frame) return;
    giscus_frame?.contentWindow?.postMessage(
      { giscus: message },
      "https://giscus.app"
    );
  }
  document.addEventListener("astro:page-load", () => {
    if (!window.location.pathname.startsWith("/posts/")) return;
    let giscusTheme = localStorage.getItem("theme") ?? "dark";
    let giscusAttributes = {
      src: "https://giscus.app/client.js",
      "data-repo": "notskamr/blog-giscus",
      "data-repo-id": "R_kgDOKx2DuA",
      "data-category": "Announcements",
      "data-category-id": "DIC_kwDOKx2DuM4CbPME",
      "data-mapping": "pathname",
      "data-reactions-enabled": "1",
      "data-emit-metadata": "0",
      "data-theme": giscusTheme,
      "data-lang": "en",
      crossorigin: "anonymous",
      async: "",
    };
    let giscusScript = document.createElement("script");
    Object.entries(giscusAttributes).forEach(([key, value]) =>
      giscusScript.setAttribute(key, value as string)
    );
    document.body.appendChild(giscusScript);
  });
  document.addEventListener("theme-change", async () => {
    sendMessage({
      setConfig: {
        theme: localStorage.getItem("theme"),
      },
    });
  });
</script>
<script>
  document.addEventListener("astro:page-load", async () => {
    if (!window.location.pathname.startsWith("/posts/")) return;
    const postMetaElem = document.querySelector("post-meta") as
      | HTMLElement
      | undefined;
    if (!postMetaElem) return;
    const rawPostMeta = postMetaElem.dataset.meta;
    if (!rawPostMeta) return;
    const postMeta = JSON.parse(rawPostMeta);
    const { id }: { id: string } = postMeta;
    if (!id) return;
    try {
      var viewedAlready = JSON.parse(sessionStorage.getItem("viewed") ?? "[]");
    } catch (e) {
      console.error("Malformed viewedAlready:\n", e);
      return;
    }
    if (viewedAlready?.includes(id)) {
      console.log("Already viewed post");
      return;
    }
    const _ = await fetch("/api/increment-view", {
      method: "POST",
      credentials: "include",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ id }),
    });
    try {
      if (_.status === 200) {
        viewedAlready.push(id);
        sessionStorage.setItem("viewed", JSON.stringify(viewedAlready));
      }
    } catch (e) {
      console.error(e);
    }
  });
</script>
<script>
  for (var links = document.links, i = 0, a; (a = links[i]); i++) {
    console.log(a.host);
    if (
      a.getAttribute("href")?.endsWith("?newTab=1") ||
      (a.host !== location.host &&
        !["", "#"].includes(a.getAttribute("href") || ""))
    ) {
      a.target = "_blank";
      a.rel = "noopener noreferrer";
    }
  }
</script>
